generator client { provider = "prisma-client-js" }
datasource db { provider = "postgresql" url = env("DATABASE_URL") }

model Tenant {
  id            String   @id @default(cuid())
  name          String
  baseCurrency  String
  createdAt     DateTime @default(now())
  users         User[]
  profile       TenantProfile?
  subscription  Subscription?
  rooms         Room[]
  reservations  Reservation[]
  customers     Customer[]
  invoices      Invoice[]
  ratePlans     RatePlan[]
  otaCreds      OtaCredential[]
}

model TenantProfile {
  tenantId String @id
  legalName String?
  address1  String?
  address2  String?
  city      String?
  state     String?
  postal    String?
  country   String?
  phone     String?
  email     String?
  website   String?
  gstin     String?
  vatNumber String?
  logoUrl   String?
  brandColor String?
  tenant   Tenant @relation(fields:[tenantId], references:[id])
}

model Subscription {
  tenantId String @id
  startedAt DateTime @default(now())
  expiresAt DateTime
  tenant   Tenant @relation(fields:[tenantId], references:[id])
}

model User {
  id        String   @id @default(cuid())
  tenantId  String
  email     String   @unique
  name      String?
  role      String
  passHash  String
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields:[tenantId], references:[id])
}

model Room {
  id        String   @id @default(cuid())
  tenantId  String
  number    String
  type      String?
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields:[tenantId], references:[id])
  reservations Reservation[]
}

model Reservation {
  id        String   @id @default(cuid())
  tenantId  String
  roomId    String
  customerId String?
  startDate DateTime
  endDate   DateTime
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields:[tenantId], references:[id])
  room      Room     @relation(fields:[roomId], references:[id])
  customer  Customer? @relation(fields:[customerId], references:[id])
}

model Customer {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  phoneRaw  String?
  phoneE164 String?  @index
  email     String?
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields:[tenantId], references:[id])
  reservations Reservation[]
}

model Invoice {
  id        String   @id @default(cuid())
  tenantId  String
  customerId String?
  number    String   @unique
  currency  String
  reportingCurrency String?
  fxRate    Decimal?
  subtotalMinor   Int
  taxTotalMinor   Int
  grandTotalMinor Int
  signedPayload   String
  signature       String
  pubKeyId        String
  createdAt DateTime @default(now())
  tenant    Tenant   @relation(fields:[tenantId], references:[id])
  customer  Customer? @relation(fields:[customerId], references:[id])
  lines     InvoiceLine[]
}

model InvoiceLine {
  id             String  @id @default(cuid())
  invoiceId      String
  description    String
  qty            Int
  rateMinor      Int
  taxPct         Int?
  taxMinor       Int
  lineTotalMinor Int
  taxCode        String?
  hsnSac         String?
  invoice        Invoice @relation(fields:[invoiceId], references:[id])
}

model RatePlan {
  id        String  @id @default(cuid())
  tenantId  String
  code      String
  name      String
  currency  String
  baseMinor Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenant    Tenant   @relation(fields:[tenantId], references:[id])
}

model OtaProvider {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  creds     OtaCredential[]
}

model OtaCredential {
  id           String   @id @default(cuid())
  tenantId     String
  providerId   String
  propertyCode String
  username     String?
  secretEnc    Bytes
  enabled      Boolean  @default(true)
  createdAt    DateTime @default(now())
  tenant   Tenant      @relation(fields:[tenantId], references:[id])
  provider OtaProvider @relation(fields:[providerId], references:[id])
  mappings OtaMapping[]

  @@index([tenantId, providerId])
}

enum OtaMapKind { ROOM RATE }

model OtaMapping {
  id           String      @id @default(cuid())
  tenantId     String
  credentialId String
  kind         OtaMapKind
  internalId   String
  providerCode String
  active       Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  credential   OtaCredential @relation(fields:[credentialId], references:[id])

  @@index([tenantId, credentialId, kind])
  @@unique([credentialId, kind, internalId])
  @@unique([credentialId, kind, providerCode])
}
